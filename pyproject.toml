[project]
name = "swx-api"
version = "1.0.0"
description = "A Laravel-style API-first FastAPI framework with OAuth, JWT, and modular structure."
requires-python = ">=3.10,<4.0"

# Core dependencies
dependencies = [
    "fastapi[standard]<1.0.0,>=0.114.2",  # FastAPI with standard extras
    "uvicorn[standard]<1.0.0,>=0.23.0",  # ASGI server for FastAPI
    "gunicorn<22.0.0,>=20.1.0",  # Production WSGI server
    "sqlalchemy<3.0,>=2.0",  # SQL ORM
    "sqlmodel<1.0.0,>=0.0.21",  # Pydantic + SQLAlchemy model integration
    "python-multipart<1.0.0,>=0.0.7",  # Support for form data parsing
    "email-validator<3.0.0.0,>=2.1.0.post1",  # Validate email addresses
    "passlib[bcrypt]<2.0.0,>=1.7.4",  # Password hashing
    "tenacity<9.0.0,>=8.2.3",  # Retry logic handling
    "pydantic>2.0",  # Data validation and settings management
    "jinja2<4.0.0,>=3.1.4",  # Templating engine
    "alembic<2.0.0,>=1.12.1",  # Database migrations
    "httpx<1.0.0,>=0.25.1",  # Async HTTP client
    "psycopg[binary]<4.0.0,>=3.1.13",  # PostgreSQL driver
    "bcrypt==4.0.1",  # Secure password hashing
    "pydantic-settings<3.0.0,>=2.2.1",  # Configuration management
    "sentry-sdk[fastapi]<2.0.0,>=1.40.6",  # Error tracking
    "pyjwt<3.0.0,>=2.8.0",  # JWT authentication
    "authlib>=1.4.0",  # OAuth authentication
    "itsdangerous>=2.2.0",  # Secure token generation
    "psutil",  # System process monitoring
]

[tool.uv]
# Developer dependencies (only for development)
dev-dependencies = [
    "pytest<8.0.0,>=7.4.3",  # Testing framework
    "mypy<2.0.0,>=1.8.0",  # Static type checker
    "ruff<1.0.0,>=0.2.2",  # Linter & formatter
    "black<24.0.0,>=23.12.0",  # Code formatter
    "pre-commit<4.0.0,>=3.6.2",  # Pre-commit hooks
    "types-passlib<2.0.0.0,>=1.7.7.20240106",  # Type hints for passlib
    "coverage<8.0.0,>=7.4.3",  # Code coverage analysis
]

[build-system]
requires = ["hatchling", "uv"]
build-backend = "hatchling.build"

[tool.hatch.build.targets.wheel]
# Ensure correct package discovery
packages = ["swx_api"]

[tool.mypy]
# Enforce strict type checking
strict = true
exclude = ["venv", ".venv", "migrations", "alembic"]

[tool.ruff]
# Set the target Python version
target-version = "py310"
# Ignore specific directories
exclude = ["migrations", "alembic"]

[tool.ruff.lint]
# Enable specific linting rules
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # Pyflakes (detects logical errors)
    "I",  # isort (import sorting)
    "B",  # flake8-bugbear (common mistakes)
    "C4",  # flake8-comprehensions (optimize comprehensions)
    "UP",  # pyupgrade (keep syntax modern)
    "ARG001",  # Detect unused arguments
]

# Disable specific warnings that conflict with other tools or aren't relevant
ignore = [
    "E501",  # Ignore line length (handled by Black)
    "B008",  # Function calls in argument defaults
    "W191",  # Indentation contains tabs
    "B904",  # Raising exceptions without `from e`
]

[project.scripts]
# CLI entry point
swx = "swx_api.core.cli.main:main"
