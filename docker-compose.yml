services:

  db:
    image: timescale/timescaledb-ha:pg17
    restart: always
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U ${DB_USER} -d ${DB_NAME}" ]
      interval: 10s
      retries: 5
      start_period: 30s
      timeout: 10s
    volumes:
      - app-db-data:/home/postgres/pgdata/data
    env_file:
      - .env
    environment:
      - PGDATA=/var/lib/postgresql/data/pgdata
      - POSTGRES_USER=${DB_USER}
      - POSTGRES_PASSWORD=${DB_PASSWORD}
      - POSTGRES_DB=${DB_NAME}
    command: [ "-c", "ai.ollama_host=http://host.docker.internal:11434" ]  # Uses local Ollama


  vectorizer-worker:
    image: timescale/pgai-vectorizer-worker:v0.7.0
    restart: always
    environment:
      PGAI_VECTORIZER_WORKER_DB_URL: postgres://czu_user:changeme@db:5432/czu_db
      OLLAMA_HOST: http://host.docker.internal:11434
    command: [ "--poll-interval", "5s", "--log-level", "DEBUG" ]
    depends_on:
      - db

  adminer:
    image: adminer
    restart: always
    networks:
      - traefik-public
      - default
    depends_on:
      - db
    environment:
      - ADMINER_DESIGN=dracula
    labels:
      - traefik.enable=true
      - traefik.docker.network=traefik-public
      - traefik.constraint-label=traefik-public
      - traefik.http.routers.${STACK_NAME}-adminer-http.rule=Host(`adminer.${DOMAIN}`)
      - traefik.http.routers.${STACK_NAME}-adminer-http.entrypoints=http
      - traefik.http.routers.${STACK_NAME}-adminer-http.middlewares=https-redirect
      - traefik.http.routers.${STACK_NAME}-adminer-https.rule=Host(`adminer.${DOMAIN}`)
      - traefik.http.routers.${STACK_NAME}-adminer-https.entrypoints=https
      - traefik.http.routers.${STACK_NAME}-adminer-https.tls=true
      - traefik.http.routers.${STACK_NAME}-adminer-https.tls.certresolver=le
      - traefik.http.services.${STACK_NAME}-adminer.loadbalancer.server.port=8080

  swx-api:
    image: "swx-api:latest"  # Fixed the image reference
    restart: always
    networks:
      - traefik-public
      - default
    depends_on:
      db:
        condition: service_healthy
        restart: true
    command:
      - bash scripts/prestart.sh
    env_file:
      - .env
    environment:
      - DOMAIN=${DOMAIN}
      - ENVIRONMENT=${ENVIRONMENT}
      - BACKEND_CORS_ORIGINS=${BACKEND_CORS_ORIGINS}
      - SECRET_KEY=${SECRET_KEY}
      - FIRST_SUPERUSER=${FIRST_SUPERUSER}
      - FIRST_SUPERUSER_PASSWORD=${FIRST_SUPERUSER_PASSWORD}
      - SMTP_HOST=${SMTP_HOST}
      - SMTP_USER=${SMTP_USER}
      - SMTP_PASSWORD=${SMTP_PASSWORD}
      - EMAILS_FROM_EMAIL=${EMAILS_FROM_EMAIL}
      - DOCKERIZED=true
      - DB_HOST=db
      - DB_PORT=${DB_PORT}
      - DB_NAME=${DB_NAME}
      - DB_USER=${DB_USER}
      - DB_PASSWORD=${DB_PASSWORD}
      - SENTRY_DSN=${SENTRY_DSN}

    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8000/api/utils/health-check" ]  # Fixed URL
      interval: 10s
      timeout: 5s
      retries: 5

    build:
      context: .
      dockerfile: Dockerfile
    labels:
      - traefik.enable=true
      - traefik.docker.network=traefik-public
      - traefik.constraint-label=traefik-public
      - traefik.http.services.${STACK_NAME}-swx-api.loadbalancer.server.port=8000
      - traefik.http.routers.${STACK_NAME}-swx-api-http.rule=Host(`api.${DOMAIN}`)
      - traefik.http.routers.${STACK_NAME}-swx-api-http.entrypoints=http
      - traefik.http.routers.${STACK_NAME}-swx-api-https.rule=Host(`api.${DOMAIN}`)
      - traefik.http.routers.${STACK_NAME}-swx-api-https.entrypoints=https
      - traefik.http.routers.${STACK_NAME}-swx-api-https.tls=true
      - traefik.http.routers.${STACK_NAME}-swx-api-https.tls.certresolver=le
      - traefik.http.routers.${STACK_NAME}-swx-api-http.middlewares=https-redirect

volumes:
  app-db-data:

networks:
  traefik-public:
    external: true
